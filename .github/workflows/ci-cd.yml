name: Task Management Application Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping:1})'"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          check-latest: false  # Skip version check for speed

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-




      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm test
        env:
          MONGO_URI: mongodb://localhost:27017/task-manager-test
          NODE_ENV: test

      - name: Upload test coverage
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
          retention-days: 5

      - name: Build application
        run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    # Removed dependency on test job to run in parallel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run npm audit
        run: npm audit --production
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-and-push:
    name: Build and Push Docker Image
    needs: [ test, security-scan ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/task-api
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}


      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64  # Removed linux/arm64 for faster builds
          build-args: |
            NODE_ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
            ENV_FILE=${{ github.ref == 'refs/heads/main' && '.env.production' || github.ref == 'refs/heads/develop' && '.env.staging' || '.env.development' }}


  deploy-github-pages:
    name: Deploy API Documentation
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate API documentation
        run: |
          mkdir -p docs
          cp swagger.json docs/
          npm install -g redoc-cli
          redoc-cli bundle swagger.json -o docs/index.html --title "Task Management API Documentation"


      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs
          branch: gh-pages

  deploy-staging:
    name: Deploy to Staging Environment
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      deployments: write
      contents: read

    steps:
      - name: Create deployment
        id: deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: staging
          ref: ${{ github.sha }}

      - name: Deploy to GitHub Environment
        run: |
          echo "Deploying to staging environment"
          echo "Image: ghcr.io/${{ github.repository_owner }}/task-api:develop"
          # Add your deployment commands here
          # For example, using SSH to deploy to a server or updating a Kubernetes deployment


      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: staging
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://staging.yourdomain.com

  deploy-production:
    name: Deploy to Production Environment
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && needs.build-and-push.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      deployments: write
      contents: read

    steps:
      - name: Create deployment
        id: deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production
          ref: ${{ github.sha }}

      - name: Deploy to GitHub Environment
        run: |
          echo "Deploying to production environment"
          echo "Image: ghcr.io/${{ github.repository_owner }}/task-api:latest"

      - name: Deploy to Render
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${{ secrets.RENDER_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": true}'

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ secrets.RENDER_SERVICE_NAME }}.onrender.com

  notify:
    name: Notify Deployment
    needs: [ deploy-staging, deploy-production, deploy-github-pages ]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "status=${{ needs.deploy-production.result }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "status=${{ needs.deploy-staging.result }}" >> $GITHUB_OUTPUT
          fi